{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "GetAllBlogsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-dev-getAllBlogs"
      }
    },
    "CreateBlogLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-dev-createBlog"
      }
    },
    "UpdateBlogLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-dev-updateBlog"
      }
    },
    "DeleteBlogLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-dev-deleteBlog"
      }
    },
    "GetBlogByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-dev-getBlogById"
      }
    },
    "GetMyBlogsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-dev-getMyBlogs"
      }
    },
    "LoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-dev-login"
      }
    },
    "SignupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-dev-signup"
      }
    },
    "GetAllCommentsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-dev-getAllComments"
      }
    },
    "AddCommentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-dev-addComment"
      }
    },
    "AddReplyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-dev-addReply"
      }
    },
    "ToggleAdminLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-dev-toggleAdmin"
      }
    },
    "ToggleBlogApprovalLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-dev-toggleBlogApproval"
      }
    },
    "GetAllUsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-dev-getAllUsers"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "sls",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sls-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sls-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Scan",
                    "dynamodb:PutItem",
                    "dynamodb:GetItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:Query"
                  ],
                  "Resource": "arn:aws:dynamodb:ap-south-1:585768182535:table/*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "sls",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "GetAllBlogsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-9a2250f6-09ea",
          "S3Key": "serverless/sls/dev/1731574004550-2024-11-14T08:46:44.550Z/sls.zip"
        },
        "Handler": "getAllBlogs.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "sls-dev-getAllBlogs",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllBlogsLogGroup"
      ]
    },
    "CreateBlogLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-9a2250f6-09ea",
          "S3Key": "serverless/sls/dev/1731574004550-2024-11-14T08:46:44.550Z/sls.zip"
        },
        "Handler": "createBlog.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "sls-dev-createBlog",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateBlogLogGroup"
      ]
    },
    "UpdateBlogLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-9a2250f6-09ea",
          "S3Key": "serverless/sls/dev/1731574004550-2024-11-14T08:46:44.550Z/sls.zip"
        },
        "Handler": "updateBlog.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "sls-dev-updateBlog",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateBlogLogGroup"
      ]
    },
    "DeleteBlogLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-9a2250f6-09ea",
          "S3Key": "serverless/sls/dev/1731574004550-2024-11-14T08:46:44.550Z/sls.zip"
        },
        "Handler": "deleteBlog.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "sls-dev-deleteBlog",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteBlogLogGroup"
      ]
    },
    "GetBlogByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-9a2250f6-09ea",
          "S3Key": "serverless/sls/dev/1731574004550-2024-11-14T08:46:44.550Z/sls.zip"
        },
        "Handler": "getBlogById.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "sls-dev-getBlogById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetBlogByIdLogGroup"
      ]
    },
    "GetMyBlogsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-9a2250f6-09ea",
          "S3Key": "serverless/sls/dev/1731574004550-2024-11-14T08:46:44.550Z/sls.zip"
        },
        "Handler": "getMyBlogs.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "sls-dev-getMyBlogs",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetMyBlogsLogGroup"
      ]
    },
    "LoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-9a2250f6-09ea",
          "S3Key": "serverless/sls/dev/1731574004550-2024-11-14T08:46:44.550Z/sls.zip"
        },
        "Handler": "login.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "sls-dev-login",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LoginLogGroup"
      ]
    },
    "SignupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-9a2250f6-09ea",
          "S3Key": "serverless/sls/dev/1731574004550-2024-11-14T08:46:44.550Z/sls.zip"
        },
        "Handler": "signup.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "sls-dev-signup",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SignupLogGroup"
      ]
    },
    "GetAllCommentsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-9a2250f6-09ea",
          "S3Key": "serverless/sls/dev/1731574004550-2024-11-14T08:46:44.550Z/sls.zip"
        },
        "Handler": "getAllComments.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "sls-dev-getAllComments",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllCommentsLogGroup"
      ]
    },
    "AddCommentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-9a2250f6-09ea",
          "S3Key": "serverless/sls/dev/1731574004550-2024-11-14T08:46:44.550Z/sls.zip"
        },
        "Handler": "addComment.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "sls-dev-addComment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddCommentLogGroup"
      ]
    },
    "AddReplyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-9a2250f6-09ea",
          "S3Key": "serverless/sls/dev/1731574004550-2024-11-14T08:46:44.550Z/sls.zip"
        },
        "Handler": "addReply.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "sls-dev-addReply",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddReplyLogGroup"
      ]
    },
    "ToggleAdminLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-9a2250f6-09ea",
          "S3Key": "serverless/sls/dev/1731574004550-2024-11-14T08:46:44.550Z/sls.zip"
        },
        "Handler": "toggleAdmin.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "sls-dev-toggleAdmin",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ToggleAdminLogGroup"
      ]
    },
    "ToggleBlogApprovalLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-9a2250f6-09ea",
          "S3Key": "serverless/sls/dev/1731574004550-2024-11-14T08:46:44.550Z/sls.zip"
        },
        "Handler": "toggleApproval.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "sls-dev-toggleBlogApproval",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ToggleBlogApprovalLogGroup"
      ]
    },
    "GetAllUsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-9a2250f6-09ea",
          "S3Key": "serverless/sls/dev/1731574004550-2024-11-14T08:46:44.550Z/sls.zip"
        },
        "Handler": "getAllUsers.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "sls-dev-getAllUsers",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllUsersLogGroup"
      ]
    },
    "GetAllBlogsLambdaVersionSDAgyEbDI6IltG1r11L95OzKehpzX3nooXtGtCEVRM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllBlogsLambdaFunction"
        },
        "CodeSha256": "3ETbl2NWWj6Qz6KLXA0+T5QFHwrGiFaO0JzBWGXJQkw="
      }
    },
    "CreateBlogLambdaVersionQZ0wEhwxllvg2HhN7WjM4ZNKLDP1qLlAYdQr7eQws": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateBlogLambdaFunction"
        },
        "CodeSha256": "3ETbl2NWWj6Qz6KLXA0+T5QFHwrGiFaO0JzBWGXJQkw="
      }
    },
    "UpdateBlogLambdaVersion6k9VMbZelJo3ArQ9Ou8qKPK3l7van53GYo3yTcQHRx4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateBlogLambdaFunction"
        },
        "CodeSha256": "3ETbl2NWWj6Qz6KLXA0+T5QFHwrGiFaO0JzBWGXJQkw="
      }
    },
    "DeleteBlogLambdaVersionyrKcpJQ58q2PbeBX2KToAjA8VfLyo5yOewh0YLg4CY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteBlogLambdaFunction"
        },
        "CodeSha256": "3ETbl2NWWj6Qz6KLXA0+T5QFHwrGiFaO0JzBWGXJQkw="
      }
    },
    "GetBlogByIdLambdaVersionTPeJ6QFEIckFTfkRTA1F96JJ3WW9Yb0QtACTwDcc6SA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetBlogByIdLambdaFunction"
        },
        "CodeSha256": "3ETbl2NWWj6Qz6KLXA0+T5QFHwrGiFaO0JzBWGXJQkw="
      }
    },
    "GetMyBlogsLambdaVersionfajI0QlEeNeymrbqvtryUxehvWXEu8THINNvAvDpUM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetMyBlogsLambdaFunction"
        },
        "CodeSha256": "3ETbl2NWWj6Qz6KLXA0+T5QFHwrGiFaO0JzBWGXJQkw="
      }
    },
    "LoginLambdaVersion1ncwk3GhGjXGyLsSAye3450uK9NgwKctkaD42Q8M6A": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LoginLambdaFunction"
        },
        "CodeSha256": "3ETbl2NWWj6Qz6KLXA0+T5QFHwrGiFaO0JzBWGXJQkw="
      }
    },
    "SignupLambdaVersion5wZLchWDUN1UMApoIH83WcRqbqoGQKKUSSUdsYwQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignupLambdaFunction"
        },
        "CodeSha256": "3ETbl2NWWj6Qz6KLXA0+T5QFHwrGiFaO0JzBWGXJQkw="
      }
    },
    "GetAllCommentsLambdaVersionoHdDq9p5XOeVgwy23W3rroFQT0SrcgWL0vAVX4sxg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllCommentsLambdaFunction"
        },
        "CodeSha256": "3ETbl2NWWj6Qz6KLXA0+T5QFHwrGiFaO0JzBWGXJQkw="
      }
    },
    "AddCommentLambdaVersionMLjDuFWvfrDxJUOcSrJivpKZ1OeFccHU60kOn2xbo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddCommentLambdaFunction"
        },
        "CodeSha256": "3ETbl2NWWj6Qz6KLXA0+T5QFHwrGiFaO0JzBWGXJQkw="
      }
    },
    "AddReplyLambdaVersionvMEKTzX57rytjcYC0DAap9gIYYgwSV9gBQtNoa5AbfY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddReplyLambdaFunction"
        },
        "CodeSha256": "3ETbl2NWWj6Qz6KLXA0+T5QFHwrGiFaO0JzBWGXJQkw="
      }
    },
    "ToggleAdminLambdaVersionvtoAoVulxUH3wmkrfEva3xUH8NZ0DCdzWNt901GkWU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ToggleAdminLambdaFunction"
        },
        "CodeSha256": "3ETbl2NWWj6Qz6KLXA0+T5QFHwrGiFaO0JzBWGXJQkw="
      }
    },
    "ToggleBlogApprovalLambdaVersionER0o4P2PyRHRshdhw7kNHReKG12KaGBNNVhJ5bL06bc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ToggleBlogApprovalLambdaFunction"
        },
        "CodeSha256": "3ETbl2NWWj6Qz6KLXA0+T5QFHwrGiFaO0JzBWGXJQkw="
      }
    },
    "GetAllUsersLambdaVersionibAJEGuCGYZDC6mgUjIqMy7Ys0DpaMAYytQUuqTknE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllUsersLambdaFunction"
        },
        "CodeSha256": "3ETbl2NWWj6Qz6KLXA0+T5QFHwrGiFaO0JzBWGXJQkw="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-sls",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "GetAllBlogsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllBlogsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllBlogs": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllBlogsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetBlog": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /blog",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllBlogs"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllBlogs"
    },
    "CreateBlogLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateBlogLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateBlog": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateBlogLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostBlog": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /blog",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateBlog"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateBlog"
    },
    "UpdateBlogLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateBlogLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateBlog": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateBlogLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutBlog": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /blog",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateBlog"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateBlog"
    },
    "DeleteBlogLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteBlogLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteBlog": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteBlogLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteBlogIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /blog/{_id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteBlog"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteBlog"
    },
    "GetBlogByIdLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetBlogByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetBlogById": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetBlogByIdLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetBlogIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /blog/{_id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetBlogById"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetBlogById"
    },
    "GetMyBlogsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetMyBlogsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetMyBlogs": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetMyBlogsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetBlogAuthorAuthorVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /blog/author/{author}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetMyBlogs"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetMyBlogs"
    },
    "LoginLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationLogin": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "LoginLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAuthLogin": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /auth/login",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationLogin"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationLogin"
    },
    "SignupLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSignup": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SignupLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostAuthSignup": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /auth/signup",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSignup"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSignup"
    },
    "GetAllCommentsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllCommentsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllComments": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllCommentsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetCommentIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /comment/{_id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllComments"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllComments"
    },
    "AddCommentLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddCommentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAddComment": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AddCommentLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostComment": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /comment",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAddComment"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationAddComment"
    },
    "AddReplyLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddReplyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAddReply": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AddReplyLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutCommentReply": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /comment/reply",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAddReply"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationAddReply"
    },
    "ToggleAdminLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ToggleAdminLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationToggleAdmin": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ToggleAdminLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutAdminToggleadminIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /admin/toggleAdmin/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationToggleAdmin"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationToggleAdmin"
    },
    "ToggleBlogApprovalLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ToggleBlogApprovalLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationToggleBlogApproval": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ToggleBlogApprovalLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutAdminApproveblogIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /admin/approveBlog/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationToggleBlogApproval"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationToggleBlogApproval"
    },
    "GetAllUsersLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllUsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllUsers": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllUsersLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetAdmin": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /admin",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllUsers"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllUsers"
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-ap-south-1-9a2250f6-09ea",
      "Export": {
        "Name": "sls-sls-dev-ServerlessDeploymentBucketName"
      }
    },
    "GetAllBlogsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllBlogsLambdaVersionSDAgyEbDI6IltG1r11L95OzKehpzX3nooXtGtCEVRM"
      },
      "Export": {
        "Name": "sls-sls-dev-GetAllBlogsLambdaFunctionQualifiedArn"
      }
    },
    "CreateBlogLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateBlogLambdaVersionQZ0wEhwxllvg2HhN7WjM4ZNKLDP1qLlAYdQr7eQws"
      },
      "Export": {
        "Name": "sls-sls-dev-CreateBlogLambdaFunctionQualifiedArn"
      }
    },
    "UpdateBlogLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateBlogLambdaVersion6k9VMbZelJo3ArQ9Ou8qKPK3l7van53GYo3yTcQHRx4"
      },
      "Export": {
        "Name": "sls-sls-dev-UpdateBlogLambdaFunctionQualifiedArn"
      }
    },
    "DeleteBlogLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteBlogLambdaVersionyrKcpJQ58q2PbeBX2KToAjA8VfLyo5yOewh0YLg4CY"
      },
      "Export": {
        "Name": "sls-sls-dev-DeleteBlogLambdaFunctionQualifiedArn"
      }
    },
    "GetBlogByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetBlogByIdLambdaVersionTPeJ6QFEIckFTfkRTA1F96JJ3WW9Yb0QtACTwDcc6SA"
      },
      "Export": {
        "Name": "sls-sls-dev-GetBlogByIdLambdaFunctionQualifiedArn"
      }
    },
    "GetMyBlogsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetMyBlogsLambdaVersionfajI0QlEeNeymrbqvtryUxehvWXEu8THINNvAvDpUM"
      },
      "Export": {
        "Name": "sls-sls-dev-GetMyBlogsLambdaFunctionQualifiedArn"
      }
    },
    "LoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LoginLambdaVersion1ncwk3GhGjXGyLsSAye3450uK9NgwKctkaD42Q8M6A"
      },
      "Export": {
        "Name": "sls-sls-dev-LoginLambdaFunctionQualifiedArn"
      }
    },
    "SignupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignupLambdaVersion5wZLchWDUN1UMApoIH83WcRqbqoGQKKUSSUdsYwQ"
      },
      "Export": {
        "Name": "sls-sls-dev-SignupLambdaFunctionQualifiedArn"
      }
    },
    "GetAllCommentsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllCommentsLambdaVersionoHdDq9p5XOeVgwy23W3rroFQT0SrcgWL0vAVX4sxg"
      },
      "Export": {
        "Name": "sls-sls-dev-GetAllCommentsLambdaFunctionQualifiedArn"
      }
    },
    "AddCommentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddCommentLambdaVersionMLjDuFWvfrDxJUOcSrJivpKZ1OeFccHU60kOn2xbo"
      },
      "Export": {
        "Name": "sls-sls-dev-AddCommentLambdaFunctionQualifiedArn"
      }
    },
    "AddReplyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddReplyLambdaVersionvMEKTzX57rytjcYC0DAap9gIYYgwSV9gBQtNoa5AbfY"
      },
      "Export": {
        "Name": "sls-sls-dev-AddReplyLambdaFunctionQualifiedArn"
      }
    },
    "ToggleAdminLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ToggleAdminLambdaVersionvtoAoVulxUH3wmkrfEva3xUH8NZ0DCdzWNt901GkWU"
      },
      "Export": {
        "Name": "sls-sls-dev-ToggleAdminLambdaFunctionQualifiedArn"
      }
    },
    "ToggleBlogApprovalLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ToggleBlogApprovalLambdaVersionER0o4P2PyRHRshdhw7kNHReKG12KaGBNNVhJ5bL06bc"
      },
      "Export": {
        "Name": "sls-sls-dev-ToggleBlogApprovalLambdaFunctionQualifiedArn"
      }
    },
    "GetAllUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllUsersLambdaVersionibAJEGuCGYZDC6mgUjIqMy7Ys0DpaMAYytQUuqTknE"
      },
      "Export": {
        "Name": "sls-sls-dev-GetAllUsersLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-sls-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-sls-dev-HttpApiUrl"
      }
    }
  }
}